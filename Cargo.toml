[package]
name = "fst"
version = "0.4.5"  #:version
authors = ["Andrew Gallant <jamslam@gmail.com>"]
description = """
Use finite state transducers to compactly represents sets or maps of many
strings (> 1 billion is possible).
"""
documentation = "https://docs.rs/fst"
homepage = "https://github.com/BurntSushi/fst"
repository = "https://github.com/BurntSushi/fst"
readme = "README.md"
keywords = ["search", "information", "retrieval", "dictionary", "map"]
license = "Unlicense/MIT"
edition = "2018"

[workspace]
members = ["bench", "fst-bin"]
exclude = ["fst-levenshtein", "fst-regex"]

[features]
default = []
levenshtein = ["utf8-ranges"]


[lib]
name = "fst"
#crate-type = ["staticlib","dylib"]
#crate-type = ["staticlib"]
#crate-type = ["dylib"]
crate-type = ["cdylib","rlib"]


[dependencies]
libc = "0.2.0"
byteorder = "1"
memmap = "0.7"
utf8-ranges = { version = "1.0.4", optional = true }
hex ="0.3"



[dev-dependencies]
doc-comment = "0.3.1"
fnv = "1.0.6"
quickcheck = { version = "0.9.2", default-features = false }
rand = "0.7.3"

[profile.release]
debug = true

[profile.bench]
debug = true

[package.metadata.docs.rs]
features = ["levenshtein"]



#compile arguments: cargo build --release  --features "levenshtein"
#test arguments: cargo test --release  --features "levenshtein" -- --nocapture
#cargo clean
#test arguments: cargo test --release  --features "levenshtein"
